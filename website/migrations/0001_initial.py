# Generated by Django 3.2.9 on 2022-05-09 15:37

import django.contrib.auth.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.TextField(verbose_name='Данные (JSON)')),
                ('status', models.IntegerField(blank=True, null=True)),
                ('date', models.BigIntegerField(verbose_name='Дата и время')),
                ('user_id', models.IntegerField(verbose_name='Пользователь, совершивший транзакцию')),
            ],
            options={
                'db_table': 'bill',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(verbose_name='Сумма')),
                ('description', models.TextField(blank=True, default='', verbose_name='Описание')),
                ('date', models.DateTimeField(verbose_name='Дата и время')),
            ],
            options={
                'verbose_name_plural': 'Расходы',
                'db_table': 'expense',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExpenseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=128)),
                ('name', models.CharField(max_length=256)),
            ],
            options={
                'db_table': 'expense_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Income',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(verbose_name='Сумма')),
                ('date', models.DateTimeField(verbose_name='Дата и время')),
            ],
            options={
                'verbose_name_plural': 'Доходы',
                'db_table': 'income',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IncomeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=128)),
                ('name', models.CharField(max_length=256)),
            ],
            options={
                'db_table': 'income_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.BigIntegerField(verbose_name='Дата и время')),
                ('user_id', models.IntegerField(verbose_name='ID заказчика')),
                ('data', models.TextField(verbose_name='Данные')),
                ('status', models.IntegerField(verbose_name='Статус')),
                ('price', models.FloatField(verbose_name='Полная цена')),
                ('paid', models.FloatField(verbose_name='Сколько оплачено')),
            ],
            options={
                'verbose_name_plural': 'Заказы',
                'db_table': 'orders',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=45, unique=True, verbose_name='тэг')),
                ('displaytag', models.CharField(max_length=45, verbose_name='Отображаемое название')),
            ],
            options={
                'verbose_name_plural': 'Тэги',
                'db_table': 'tag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WallpaperMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Кодовое название')),
                ('displayname', models.CharField(max_length=64, verbose_name='Отображаемое название')),
                ('fireproof', models.BooleanField(blank=True, default=False, verbose_name='Пожаростойкие')),
                ('animalproof', models.BooleanField(blank=True, default=False, verbose_name='Защита от животных')),
                ('washable', models.BooleanField(blank=True, default=False, verbose_name='Можно мыть')),
                ('selfadhesive', models.BooleanField(blank=True, default=False, verbose_name='Самоклеющиеся')),
            ],
            options={
                'verbose_name_plural': 'Материалы обоев',
                'db_table': 'wallpaper_material',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WallpapersEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('description', models.TextField(blank=True, default='', verbose_name='Описание')),
                ('price', models.FloatField(verbose_name='Цена, ₽')),
                ('image_url', models.CharField(max_length=512, verbose_name='Ссылка на изображение')),
                ('full_picture', models.BooleanField(default=False, verbose_name='Цельное изображение')),
            ],
            options={
                'verbose_name_plural': 'Готовые обои',
                'db_table': 'wallpapers_premade_entry',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WallpapersPremadeEntryHasTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'wallpapers_premade_entry_has_tag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SiteUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=16, unique=True)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('first_name', models.CharField(max_length=64)),
                ('second_name', models.CharField(blank=True, max_length=64, null=True)),
                ('last_name', models.CharField(max_length=64)),
                ('is_staff', models.BooleanField(blank=True, default=False)),
                ('is_superuser', models.BooleanField(blank=True, default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Пользователи',
                'db_table': 'website_siteuser',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
